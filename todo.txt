* builder pattern for form-elements (OK)
* include tab-index (OK)
* validation (OK)
* github (OK)
* generateStandard-Form with tab-Index (OK)
* check, if multiple forms on a page works (OK)
* access to all details in template (ok)
* overwrite desc in template (OK)
* clean up code (OK)
* Implement standard fields (text (OK), pw (OK), longtext (OK), radio (OK), select (OK))
* custom validation (OK)
* implement complicated fields (date, checkbox, dateinput, headline, hidden) (OK) 
* XSS handling (OK)
* unit-tests (OK)
* check, if everything works as aspected (OK)
* introduce styling (OK)
* format with google-format (OK)
* add maven (OK)
* add documentation (OK)
* deploy to github (OK)
* Check licence (OK)
* xsrf handling (https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project) (OK)
* introduce max-lengths mandatory (OK)
* fill bean (OK)
* allow html (OK)
* correctly handle date-input (validate, give date-val to output) (OK)
* check, if select-box, radio and checkbox can be manipulated (OK)
* debug-output (OK)
* add button input field (OK)
* create example that adds fields if a button is pressed (OK)
* discard headline and introduce a "free html" field (OK)
* use attribute-map to add attributes to an input-field (OK)
* placeholder support (OK)
* Check why tab-index does not work (OK)
* configurable formbuilder (OK) 
* maxlenght attributes  (OK)
* Double Password-Validator / form-validator (OK)
* manual setting formElements to wrong (OK)
* wrap - method that returns a before and end to avoid too much "before" and "end" Methods (OK)
* combine buildMaxlen, buildTabIndex, buildAttributes to one method (OK)
* label with attribute map (OK)
* More TagAttributes everywhere (OK)
* html5 mode (OK)
* add novalidate to form if wanted to disable html5 validation (OK)
* fix missing space between attributes (maxlenght) (OK)
* make addForm in Formchecker mandatory. Disable adding simple fields directly to fc (OK)
* add possibility to add attributes to form-tag. (maybe using this for disabling html5 validation) (OK)
* bootstrap style help-handling (OK)
* bootstrap style error-handling (OK)
* Tests: Refactor to use ExampleFormBuilder. Move Builders to own package (OK)
* Search for every "\ and replace it with the TagAttribute Builder (OK)
* check, if FormCheckerElement can have less (public) methods. Favor protected over private (OK)
* generate from bean (with annotations for descriptions, validation...) / * check bean-validation (OK)
* javascript validaton (OK)
* enable ajax handling (OK)
* handle image - uploads (OK - but needs testing and maybe some utils to handle fileupload)
* create possiblity to change order of label, error-text and input (OK)
* check, why radio is not highlighted red/green (OK)
* introduce framework modes (bootstrap/ionic/material...) (OK)

---> Release 1.0

* translates for error-msg and texts (OK)
* divide in core, integraiton, spring-examples (OK)

* provide basic translation.properties
* Simple Facade in spring-integration
* better xsrf support throw OWASP Lib (https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project)
* test non trivial tag-output (with different tags)
* avoid system.err
* provide example with theming with templates (pebble and freemarker)


* favour internally request.getParameterMap() over request
* use less dependencies. move example and tests into other repo. 
* Provide Captcha (OK)
* support complex-inputs?? (adress-field that contains several own-fields?)
* ... or nested fields
* multi-select (means: brand -> modell...)
* groups of beans in form (example: product, adress) 
* include a richtext editor
* Support enums for validation
* TBD: for security: Cut input after a max input field lenght - despite of maxlen!!

* generate standard-form with alternative rendering in template (for mobile)
* more attributes: (http://www.w3schools.com/tags/tag_input.asp)
* TBD: Do not pass complete request object but only atrributes and session?
* Perhaps form-Class mandatory? So no own handling of the form-elements within the FormChecker class (OK)
* influence standard-form in template


* consider use of owasp encoder (https://www.owasp.org/index.php/OWASP_Java_Encoder_Project#tab=Use_the_Java_Encoder_Project)


* generate from json (for rosebud :)